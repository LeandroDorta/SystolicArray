//-------------------------------------------------------------------------
// SysArrayRTL__54e36c095d0b515f.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component Adder Definition
// At /home/ld443/pymtl3/pymtl3/stdlib/rtl/arithmetics.py

module Adder__Type_Bits32
(
  input logic [0:0] clk ,
  input logic [31:0] in0 ,
  input logic [31:0] in1 ,
  output logic [31:0] out ,
  input logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3/pymtl3/stdlib/rtl/arithmetics.py:63
  // @s.update
  // def up_adder():
  //   s.out = s.in0 + s.in1
  
  always_comb begin : up_adder
    out = in0 + in1;
  end

endmodule


// PyMTL Component RegEnRst Definition
// At /home/ld443/pymtl3/pymtl3/stdlib/rtl/registers.py

module RegEnRst__Type_Bits32__reset_value_0
(
  input logic [0:0] clk ,
  input logic [0:0] en ,
  input logic [31:0] in_ ,
  output logic [31:0] out ,
  input logic [0:0] reset 
);
  localparam logic [31:0] __const__reset_value_at_up_regenrst  = 32'd0;

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3/pymtl3/stdlib/rtl/registers.py:55
  // @s.update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= Type( reset_value )
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 32'd0;
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component Multiplier Definition
// At /home/ld443/pymtl3-systolic/SysArray/multiplier.py

module Multiplier__Type_Bits32
(
  input logic [0:0] clk ,
  input logic [31:0] in0 ,
  input logic [31:0] in1 ,
  output logic [31:0] out ,
  input logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3-systolic/SysArray/multiplier.py:12
  // @s.update
  // def up_multiplier():
  //   s.out = s.in0 * s.in1
  
  always_comb begin : up_multiplier
    out = in0 * in1;
  end

endmodule


// PyMTL Component PipeQueue1EntryRTL Definition
// At /home/ld443/pymtl3/pymtl3/stdlib/rtl/queues.py

module PipeQueue1EntryRTL__EntryType_Bits32
(
  input logic [0:0] clk ,
  output logic [0:0] count ,
  input logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [31:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [31:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  logic [31:0] entry;
  logic [0:0] full;

  // PyMTL Lambda Block Source
  // At /home/ld443/pymtl3/pymtl3/stdlib/rtl/queues.py:493
  // s.deq.rdy //= lambda: s.full & ~s.reset
  
  always_comb begin : _lambda__s_pe_elements_0__0__reg_matrix_q_deq_rdy
    deq__rdy = full & ( ~reset );
  end

  // PyMTL Lambda Block Source
  // At /home/ld443/pymtl3/pymtl3/stdlib/rtl/queues.py:492
  // s.enq.rdy //= lambda: ~s.reset & ( ~s.full | s.deq.en )
  
  always_comb begin : _lambda__s_pe_elements_0__0__reg_matrix_q_enq_rdy
    enq__rdy = ( ~reset ) & ( ( ~full ) | deq__en );
  end

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3/pymtl3/stdlib/rtl/queues.py:495
  // @s.update_ff
  // def ff_pipe1():
  //   s.full <<= ~s.reset & ( s.enq.en | s.full & ~s.deq.en )
  // 
  //   if s.enq.en:
  //     s.entry <<= s.enq.msg
  
  always_ff @(posedge clk) begin : ff_pipe1
    full <= ( ~reset ) & ( enq__en | ( full & ( ~deq__en ) ) );
    if ( enq__en ) begin
      entry <= enq__msg;
    end
  end

  assign count = full;
  assign deq__ret = entry;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/ld443/pymtl3/pymtl3/stdlib/rtl/queues.py

module PipeQueueRTL__EntryType_Bits32__num_entries_1
(
  input logic [0:0] clk ,
  output logic [0:0] count ,
  input logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [31:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [31:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component q
  //-------------------------------------------------------------

  logic [0:0] q__clk;
  logic [0:0] q__count;
  logic [0:0] q__reset;
  logic [0:0] q__deq__en;
  logic [0:0] q__deq__rdy;
  logic [31:0] q__deq__ret;
  logic [0:0] q__enq__en;
  logic [31:0] q__enq__msg;
  logic [0:0] q__enq__rdy;

  PipeQueue1EntryRTL__EntryType_Bits32 q
  (
    .clk( q__clk ),
    .count( q__count ),
    .reset( q__reset ),
    .deq__en( q__deq__en ),
    .deq__rdy( q__deq__rdy ),
    .deq__ret( q__deq__ret ),
    .enq__en( q__enq__en ),
    .enq__msg( q__enq__msg ),
    .enq__rdy( q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component q
  //-------------------------------------------------------------

  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = enq__en;
  assign q__enq__msg = enq__msg;
  assign enq__rdy = q__enq__rdy;
  assign q__deq__en = deq__en;
  assign deq__rdy = q__deq__rdy;
  assign deq__ret = q__deq__ret;
  assign count = q__count;

endmodule


// PyMTL Component RegEn Definition
// At /home/ld443/pymtl3/pymtl3/stdlib/rtl/registers.py

module RegEn__Type_Bits32
(
  input logic [0:0] clk ,
  input logic [0:0] en ,
  input logic [31:0] in_ ,
  output logic [31:0] out ,
  input logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3/pymtl3/stdlib/rtl/registers.py:25
  // @s.update_ff
  // def up_regen():
  //   if s.en:
  //     s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regen
    if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component RegEnRst Definition
// At /home/ld443/pymtl3/pymtl3/stdlib/rtl/registers.py

module RegEnRst__Type_Bits1__reset_value_0
(
  input logic [0:0] clk ,
  input logic [0:0] en ,
  input logic [0:0] in_ ,
  output logic [0:0] out ,
  input logic [0:0] reset 
);
  localparam logic [31:0] __const__reset_value_at_up_regenrst  = 32'd0;

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3/pymtl3/stdlib/rtl/registers.py:55
  // @s.update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= Type( reset_value )
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 1'd0;
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component SysArrayProcElRTL Definition
// Full name: SysArrayProcElRTL__Type_<SysArray.SysArrayType.SysArrayType object at 0x7fe854dcbc18>
// At /home/ld443/pymtl3-systolic/SysArray/SysArrayProcElRTL.py

module SysArrayProcElRTL__b71fb16ff5ab1620
(
  input logic [0:0] clk ,
  output logic [31:0] perf_counter ,
  input logic [0:0] reset ,
  output logic [0:0] weight_avail ,
  input logic [0:0] matrix_in__en  ,
  input logic [31:0] matrix_in__msg  ,
  output logic [0:0] matrix_in__rdy  ,
  output logic [0:0] matrix_out__en  ,
  output logic [31:0] matrix_out__msg  ,
  input logic [0:0] matrix_out__rdy  ,
  input logic [0:0] result_in__en  ,
  input logic [31:0] result_in__msg  ,
  output logic [0:0] result_in__rdy  ,
  output logic [0:0] result_out__en  ,
  output logic [31:0] result_out__msg  ,
  input logic [0:0] result_out__rdy  ,
  input logic [0:0] weight_in__en  ,
  input logic [31:0] weight_in__msg  ,
  output logic [0:0] weight_in__rdy  ,
  output logic [0:0] weight_out__en  ,
  output logic [31:0] weight_out__msg  ,
  input logic [0:0] weight_out__rdy  
);
  logic [31:0] counter_wire;
  //-------------------------------------------------------------
  // Component adder
  //-------------------------------------------------------------

  logic [0:0] adder__clk;
  logic [31:0] adder__in0;
  logic [31:0] adder__in1;
  logic [31:0] adder__out;
  logic [0:0] adder__reset;

  Adder__Type_Bits32 adder
  (
    .clk( adder__clk ),
    .in0( adder__in0 ),
    .in1( adder__in1 ),
    .out( adder__out ),
    .reset( adder__reset )
  );

  //-------------------------------------------------------------
  // End of component adder
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component counter_reg
  //-------------------------------------------------------------

  logic [0:0] counter_reg__clk;
  logic [0:0] counter_reg__en;
  logic [31:0] counter_reg__in_;
  logic [31:0] counter_reg__out;
  logic [0:0] counter_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 counter_reg
  (
    .clk( counter_reg__clk ),
    .en( counter_reg__en ),
    .in_( counter_reg__in_ ),
    .out( counter_reg__out ),
    .reset( counter_reg__reset )
  );

  //-------------------------------------------------------------
  // End of component counter_reg
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mult
  //-------------------------------------------------------------

  logic [0:0] mult__clk;
  logic [31:0] mult__in0;
  logic [31:0] mult__in1;
  logic [31:0] mult__out;
  logic [0:0] mult__reset;

  Multiplier__Type_Bits32 mult
  (
    .clk( mult__clk ),
    .in0( mult__in0 ),
    .in1( mult__in1 ),
    .out( mult__out ),
    .reset( mult__reset )
  );

  //-------------------------------------------------------------
  // End of component mult
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component reg_matrix
  //-------------------------------------------------------------

  logic [0:0] reg_matrix__clk;
  logic [0:0] reg_matrix__count;
  logic [0:0] reg_matrix__reset;
  logic [0:0] reg_matrix__deq__en;
  logic [0:0] reg_matrix__deq__rdy;
  logic [31:0] reg_matrix__deq__ret;
  logic [0:0] reg_matrix__enq__en;
  logic [31:0] reg_matrix__enq__msg;
  logic [0:0] reg_matrix__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_1 reg_matrix
  (
    .clk( reg_matrix__clk ),
    .count( reg_matrix__count ),
    .reset( reg_matrix__reset ),
    .deq__en( reg_matrix__deq__en ),
    .deq__rdy( reg_matrix__deq__rdy ),
    .deq__ret( reg_matrix__deq__ret ),
    .enq__en( reg_matrix__enq__en ),
    .enq__msg( reg_matrix__enq__msg ),
    .enq__rdy( reg_matrix__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component reg_matrix
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component reg_result
  //-------------------------------------------------------------

  logic [0:0] reg_result__clk;
  logic [0:0] reg_result__count;
  logic [0:0] reg_result__reset;
  logic [0:0] reg_result__deq__en;
  logic [0:0] reg_result__deq__rdy;
  logic [31:0] reg_result__deq__ret;
  logic [0:0] reg_result__enq__en;
  logic [31:0] reg_result__enq__msg;
  logic [0:0] reg_result__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_1 reg_result
  (
    .clk( reg_result__clk ),
    .count( reg_result__count ),
    .reset( reg_result__reset ),
    .deq__en( reg_result__deq__en ),
    .deq__rdy( reg_result__deq__rdy ),
    .deq__ret( reg_result__deq__ret ),
    .enq__en( reg_result__enq__en ),
    .enq__msg( reg_result__enq__msg ),
    .enq__rdy( reg_result__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component reg_result
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component weight
  //-------------------------------------------------------------

  logic [0:0] weight__clk;
  logic [0:0] weight__en;
  logic [31:0] weight__in_;
  logic [31:0] weight__out;
  logic [0:0] weight__reset;

  RegEn__Type_Bits32 weight
  (
    .clk( weight__clk ),
    .en( weight__en ),
    .in_( weight__in_ ),
    .out( weight__out ),
    .reset( weight__reset )
  );

  //-------------------------------------------------------------
  // End of component weight
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component weight_avail_reg
  //-------------------------------------------------------------

  logic [0:0] weight_avail_reg__clk;
  logic [0:0] weight_avail_reg__en;
  logic [0:0] weight_avail_reg__in_;
  logic [0:0] weight_avail_reg__out;
  logic [0:0] weight_avail_reg__reset;

  RegEnRst__Type_Bits1__reset_value_0 weight_avail_reg
  (
    .clk( weight_avail_reg__clk ),
    .en( weight_avail_reg__en ),
    .in_( weight_avail_reg__in_ ),
    .out( weight_avail_reg__out ),
    .reset( weight_avail_reg__reset )
  );

  //-------------------------------------------------------------
  // End of component weight_avail_reg
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3-systolic/SysArray/SysArrayProcElRTL.py:88
  // @s.update
  // def perf_counter_state():    
  //   
  //   s.counter_wire = s.counter_reg.out
  //       
  //   if s.reg_result.deq.rdy and s.reg_matrix.deq.rdy:
  //     s.counter_reg.en  = b1(1)
  //     s.counter_reg.in_ = s.counter_wire + b32(1)
  //   else:
  //     s.counter_reg.en = b1(0)
  
  always_comb begin : perf_counter_state
    counter_wire = counter_reg__out;
    if ( reg_result__deq__rdy && reg_matrix__deq__rdy ) begin
      counter_reg__en = 1'd1;
      counter_reg__in_ = counter_wire + 32'd1;
    end
    else
      counter_reg__en = 1'd0;
  end

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3-systolic/SysArray/SysArrayProcElRTL.py:100
  // @s.update
  // def up_state():
  //   
  //   # ======================= Setting-up enables =======================
  //   # Outputs enable
  //   s.result_out.en = s.reg_result.deq.rdy & s.reg_matrix.deq.rdy & \
  //                     s.result_out.rdy & s.matrix_out.rdy & \
  //                     s.weight_avail_reg.out
  //   s.matrix_out.en = s.reg_result.deq.rdy & s.reg_matrix.deq.rdy & \
  //                     s.result_out.rdy & s.matrix_out.rdy & \
  //                     s.weight_avail_reg.out
  //   
  //   # Weight enable
  //   s.weight.en     = s.weight_in.en
  //   s.weight_out.en = s.weight_in.en & s.weight_out.rdy 
  //   
  //   # Queues enable
  //   s.reg_result.deq.en = s.reg_result.deq.rdy & \
  //                     s.result_out.rdy & s.matrix_out.rdy & s.weight_avail_reg.out
  //   s.reg_matrix.deq.en = s.reg_matrix.deq.rdy & \
  //                     s.result_out.rdy & s.matrix_out.rdy & s.weight_avail_reg.out
  
  always_comb begin : up_state
    result_out__en = ( ( ( reg_result__deq__rdy & reg_matrix__deq__rdy ) & result_out__rdy ) & matrix_out__rdy ) & weight_avail_reg__out;
    matrix_out__en = ( ( ( reg_result__deq__rdy & reg_matrix__deq__rdy ) & result_out__rdy ) & matrix_out__rdy ) & weight_avail_reg__out;
    weight__en = weight_in__en;
    weight_out__en = weight_in__en & weight_out__rdy;
    reg_result__deq__en = ( ( reg_result__deq__rdy & result_out__rdy ) & matrix_out__rdy ) & weight_avail_reg__out;
    reg_matrix__deq__en = ( ( reg_matrix__deq__rdy & result_out__rdy ) & matrix_out__rdy ) & weight_avail_reg__out;
  end

  assign weight__clk = clk;
  assign weight__reset = reset;
  assign counter_reg__clk = clk;
  assign counter_reg__reset = reset;
  assign weight_avail_reg__clk = clk;
  assign weight_avail_reg__reset = reset;
  assign reg_result__clk = clk;
  assign reg_result__reset = reset;
  assign reg_matrix__clk = clk;
  assign reg_matrix__reset = reset;
  assign adder__clk = clk;
  assign adder__reset = reset;
  assign mult__clk = clk;
  assign mult__reset = reset;
  assign mult__in0 = reg_matrix__deq__ret;
  assign mult__in1 = weight__out;
  assign adder__in0 = mult__out;
  assign adder__in1 = reg_result__deq__ret;
  assign result_out__msg = adder__out;
  assign reg_matrix__enq__en = matrix_in__en;
  assign reg_matrix__enq__msg = matrix_in__msg;
  assign matrix_in__rdy = reg_matrix__enq__rdy;
  assign reg_result__enq__en = result_in__en;
  assign reg_result__enq__msg = result_in__msg;
  assign result_in__rdy = reg_result__enq__rdy;
  assign matrix_out__msg = reg_matrix__deq__ret;
  assign weight__in_ = weight_in__msg;
  assign weight_in__rdy = weight_out__rdy;
  assign weight_out__msg = weight__out;
  assign weight_avail_reg__en = weight_in__en;
  assign weight_avail_reg__in_ = weight_in__en;
  assign weight_avail = weight_avail_reg__out;
  assign perf_counter = counter_reg__out;

endmodule


// PyMTL Component SysArrayRTL Definition
// Full name: SysArrayRTL__Type_<SysArray.SysArrayType.SysArrayType object at 0x7fe854dcbc18>__rows_4__cols_4
// At /home/ld443/pymtl3-systolic/SysArray/SysArrayRTL.py

module SysArrayRTL
(
  output logic [0:0] all_weights_avail ,
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  output logic [0:0] matrix_col__en [0:3] ,
  output logic [31:0] matrix_col__msg [0:3] ,
  input logic [0:0] matrix_col__rdy [0:3] ,
  input logic [0:0] matrix_row__en [0:3] ,
  input logic [31:0] matrix_row__msg [0:3] ,
  output logic [0:0] matrix_row__rdy [0:3] ,
  input logic [0:0] weight_in_col__en [0:3] ,
  input logic [31:0] weight_in_col__msg [0:3] ,
  output logic [0:0] weight_in_col__rdy [0:3] ,
  output logic [0:0] weight_out_col__en [0:3] ,
  output logic [31:0] weight_out_col__msg [0:3] ,
  input logic [0:0] weight_out_col__rdy [0:3] 
);
  localparam logic [31:0] __const__cols_at_last_weight_avail  = 32'd4;
  localparam logic [31:0] __const__rows_at_last_weight_avail  = 32'd4;
  localparam logic [31:0] __const__rows_at_matrix_en_rdy_signals  = 32'd4;
  logic [3:0] last_row_weight_avail;
  logic [3:0] matrix_in_rdys;
  //-------------------------------------------------------------
  // Component pe_elements[0:3][0:3]
  //-------------------------------------------------------------

  logic [0:0] pe_elements__clk [0:3][0:3];
  logic [31:0] pe_elements__perf_counter [0:3][0:3];
  logic [0:0] pe_elements__reset [0:3][0:3];
  logic [0:0] pe_elements__weight_avail [0:3][0:3];
  logic [0:0] pe_elements__matrix_in__en [0:3][0:3];
  logic [31:0] pe_elements__matrix_in__msg [0:3][0:3];
  logic [0:0] pe_elements__matrix_in__rdy [0:3][0:3];
  logic [0:0] pe_elements__matrix_out__en [0:3][0:3];
  logic [31:0] pe_elements__matrix_out__msg [0:3][0:3];
  logic [0:0] pe_elements__matrix_out__rdy [0:3][0:3];
  logic [0:0] pe_elements__result_in__en [0:3][0:3];
  logic [31:0] pe_elements__result_in__msg [0:3][0:3];
  logic [0:0] pe_elements__result_in__rdy [0:3][0:3];
  logic [0:0] pe_elements__result_out__en [0:3][0:3];
  logic [31:0] pe_elements__result_out__msg [0:3][0:3];
  logic [0:0] pe_elements__result_out__rdy [0:3][0:3];
  logic [0:0] pe_elements__weight_in__en [0:3][0:3];
  logic [31:0] pe_elements__weight_in__msg [0:3][0:3];
  logic [0:0] pe_elements__weight_in__rdy [0:3][0:3];
  logic [0:0] pe_elements__weight_out__en [0:3][0:3];
  logic [31:0] pe_elements__weight_out__msg [0:3][0:3];
  logic [0:0] pe_elements__weight_out__rdy [0:3][0:3];

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__0__0
  (
    .clk( pe_elements__clk[0][0] ),
    .perf_counter( pe_elements__perf_counter[0][0] ),
    .reset( pe_elements__reset[0][0] ),
    .weight_avail( pe_elements__weight_avail[0][0] ),
    .matrix_in__en( pe_elements__matrix_in__en[0][0] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[0][0] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[0][0] ),
    .matrix_out__en( pe_elements__matrix_out__en[0][0] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[0][0] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[0][0] ),
    .result_in__en( pe_elements__result_in__en[0][0] ),
    .result_in__msg( pe_elements__result_in__msg[0][0] ),
    .result_in__rdy( pe_elements__result_in__rdy[0][0] ),
    .result_out__en( pe_elements__result_out__en[0][0] ),
    .result_out__msg( pe_elements__result_out__msg[0][0] ),
    .result_out__rdy( pe_elements__result_out__rdy[0][0] ),
    .weight_in__en( pe_elements__weight_in__en[0][0] ),
    .weight_in__msg( pe_elements__weight_in__msg[0][0] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[0][0] ),
    .weight_out__en( pe_elements__weight_out__en[0][0] ),
    .weight_out__msg( pe_elements__weight_out__msg[0][0] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[0][0] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__0__1
  (
    .clk( pe_elements__clk[0][1] ),
    .perf_counter( pe_elements__perf_counter[0][1] ),
    .reset( pe_elements__reset[0][1] ),
    .weight_avail( pe_elements__weight_avail[0][1] ),
    .matrix_in__en( pe_elements__matrix_in__en[0][1] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[0][1] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[0][1] ),
    .matrix_out__en( pe_elements__matrix_out__en[0][1] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[0][1] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[0][1] ),
    .result_in__en( pe_elements__result_in__en[0][1] ),
    .result_in__msg( pe_elements__result_in__msg[0][1] ),
    .result_in__rdy( pe_elements__result_in__rdy[0][1] ),
    .result_out__en( pe_elements__result_out__en[0][1] ),
    .result_out__msg( pe_elements__result_out__msg[0][1] ),
    .result_out__rdy( pe_elements__result_out__rdy[0][1] ),
    .weight_in__en( pe_elements__weight_in__en[0][1] ),
    .weight_in__msg( pe_elements__weight_in__msg[0][1] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[0][1] ),
    .weight_out__en( pe_elements__weight_out__en[0][1] ),
    .weight_out__msg( pe_elements__weight_out__msg[0][1] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[0][1] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__0__2
  (
    .clk( pe_elements__clk[0][2] ),
    .perf_counter( pe_elements__perf_counter[0][2] ),
    .reset( pe_elements__reset[0][2] ),
    .weight_avail( pe_elements__weight_avail[0][2] ),
    .matrix_in__en( pe_elements__matrix_in__en[0][2] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[0][2] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[0][2] ),
    .matrix_out__en( pe_elements__matrix_out__en[0][2] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[0][2] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[0][2] ),
    .result_in__en( pe_elements__result_in__en[0][2] ),
    .result_in__msg( pe_elements__result_in__msg[0][2] ),
    .result_in__rdy( pe_elements__result_in__rdy[0][2] ),
    .result_out__en( pe_elements__result_out__en[0][2] ),
    .result_out__msg( pe_elements__result_out__msg[0][2] ),
    .result_out__rdy( pe_elements__result_out__rdy[0][2] ),
    .weight_in__en( pe_elements__weight_in__en[0][2] ),
    .weight_in__msg( pe_elements__weight_in__msg[0][2] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[0][2] ),
    .weight_out__en( pe_elements__weight_out__en[0][2] ),
    .weight_out__msg( pe_elements__weight_out__msg[0][2] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[0][2] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__0__3
  (
    .clk( pe_elements__clk[0][3] ),
    .perf_counter( pe_elements__perf_counter[0][3] ),
    .reset( pe_elements__reset[0][3] ),
    .weight_avail( pe_elements__weight_avail[0][3] ),
    .matrix_in__en( pe_elements__matrix_in__en[0][3] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[0][3] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[0][3] ),
    .matrix_out__en( pe_elements__matrix_out__en[0][3] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[0][3] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[0][3] ),
    .result_in__en( pe_elements__result_in__en[0][3] ),
    .result_in__msg( pe_elements__result_in__msg[0][3] ),
    .result_in__rdy( pe_elements__result_in__rdy[0][3] ),
    .result_out__en( pe_elements__result_out__en[0][3] ),
    .result_out__msg( pe_elements__result_out__msg[0][3] ),
    .result_out__rdy( pe_elements__result_out__rdy[0][3] ),
    .weight_in__en( pe_elements__weight_in__en[0][3] ),
    .weight_in__msg( pe_elements__weight_in__msg[0][3] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[0][3] ),
    .weight_out__en( pe_elements__weight_out__en[0][3] ),
    .weight_out__msg( pe_elements__weight_out__msg[0][3] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[0][3] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__1__0
  (
    .clk( pe_elements__clk[1][0] ),
    .perf_counter( pe_elements__perf_counter[1][0] ),
    .reset( pe_elements__reset[1][0] ),
    .weight_avail( pe_elements__weight_avail[1][0] ),
    .matrix_in__en( pe_elements__matrix_in__en[1][0] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[1][0] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[1][0] ),
    .matrix_out__en( pe_elements__matrix_out__en[1][0] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[1][0] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[1][0] ),
    .result_in__en( pe_elements__result_in__en[1][0] ),
    .result_in__msg( pe_elements__result_in__msg[1][0] ),
    .result_in__rdy( pe_elements__result_in__rdy[1][0] ),
    .result_out__en( pe_elements__result_out__en[1][0] ),
    .result_out__msg( pe_elements__result_out__msg[1][0] ),
    .result_out__rdy( pe_elements__result_out__rdy[1][0] ),
    .weight_in__en( pe_elements__weight_in__en[1][0] ),
    .weight_in__msg( pe_elements__weight_in__msg[1][0] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[1][0] ),
    .weight_out__en( pe_elements__weight_out__en[1][0] ),
    .weight_out__msg( pe_elements__weight_out__msg[1][0] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[1][0] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__1__1
  (
    .clk( pe_elements__clk[1][1] ),
    .perf_counter( pe_elements__perf_counter[1][1] ),
    .reset( pe_elements__reset[1][1] ),
    .weight_avail( pe_elements__weight_avail[1][1] ),
    .matrix_in__en( pe_elements__matrix_in__en[1][1] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[1][1] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[1][1] ),
    .matrix_out__en( pe_elements__matrix_out__en[1][1] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[1][1] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[1][1] ),
    .result_in__en( pe_elements__result_in__en[1][1] ),
    .result_in__msg( pe_elements__result_in__msg[1][1] ),
    .result_in__rdy( pe_elements__result_in__rdy[1][1] ),
    .result_out__en( pe_elements__result_out__en[1][1] ),
    .result_out__msg( pe_elements__result_out__msg[1][1] ),
    .result_out__rdy( pe_elements__result_out__rdy[1][1] ),
    .weight_in__en( pe_elements__weight_in__en[1][1] ),
    .weight_in__msg( pe_elements__weight_in__msg[1][1] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[1][1] ),
    .weight_out__en( pe_elements__weight_out__en[1][1] ),
    .weight_out__msg( pe_elements__weight_out__msg[1][1] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[1][1] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__1__2
  (
    .clk( pe_elements__clk[1][2] ),
    .perf_counter( pe_elements__perf_counter[1][2] ),
    .reset( pe_elements__reset[1][2] ),
    .weight_avail( pe_elements__weight_avail[1][2] ),
    .matrix_in__en( pe_elements__matrix_in__en[1][2] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[1][2] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[1][2] ),
    .matrix_out__en( pe_elements__matrix_out__en[1][2] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[1][2] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[1][2] ),
    .result_in__en( pe_elements__result_in__en[1][2] ),
    .result_in__msg( pe_elements__result_in__msg[1][2] ),
    .result_in__rdy( pe_elements__result_in__rdy[1][2] ),
    .result_out__en( pe_elements__result_out__en[1][2] ),
    .result_out__msg( pe_elements__result_out__msg[1][2] ),
    .result_out__rdy( pe_elements__result_out__rdy[1][2] ),
    .weight_in__en( pe_elements__weight_in__en[1][2] ),
    .weight_in__msg( pe_elements__weight_in__msg[1][2] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[1][2] ),
    .weight_out__en( pe_elements__weight_out__en[1][2] ),
    .weight_out__msg( pe_elements__weight_out__msg[1][2] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[1][2] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__1__3
  (
    .clk( pe_elements__clk[1][3] ),
    .perf_counter( pe_elements__perf_counter[1][3] ),
    .reset( pe_elements__reset[1][3] ),
    .weight_avail( pe_elements__weight_avail[1][3] ),
    .matrix_in__en( pe_elements__matrix_in__en[1][3] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[1][3] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[1][3] ),
    .matrix_out__en( pe_elements__matrix_out__en[1][3] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[1][3] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[1][3] ),
    .result_in__en( pe_elements__result_in__en[1][3] ),
    .result_in__msg( pe_elements__result_in__msg[1][3] ),
    .result_in__rdy( pe_elements__result_in__rdy[1][3] ),
    .result_out__en( pe_elements__result_out__en[1][3] ),
    .result_out__msg( pe_elements__result_out__msg[1][3] ),
    .result_out__rdy( pe_elements__result_out__rdy[1][3] ),
    .weight_in__en( pe_elements__weight_in__en[1][3] ),
    .weight_in__msg( pe_elements__weight_in__msg[1][3] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[1][3] ),
    .weight_out__en( pe_elements__weight_out__en[1][3] ),
    .weight_out__msg( pe_elements__weight_out__msg[1][3] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[1][3] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__2__0
  (
    .clk( pe_elements__clk[2][0] ),
    .perf_counter( pe_elements__perf_counter[2][0] ),
    .reset( pe_elements__reset[2][0] ),
    .weight_avail( pe_elements__weight_avail[2][0] ),
    .matrix_in__en( pe_elements__matrix_in__en[2][0] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[2][0] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[2][0] ),
    .matrix_out__en( pe_elements__matrix_out__en[2][0] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[2][0] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[2][0] ),
    .result_in__en( pe_elements__result_in__en[2][0] ),
    .result_in__msg( pe_elements__result_in__msg[2][0] ),
    .result_in__rdy( pe_elements__result_in__rdy[2][0] ),
    .result_out__en( pe_elements__result_out__en[2][0] ),
    .result_out__msg( pe_elements__result_out__msg[2][0] ),
    .result_out__rdy( pe_elements__result_out__rdy[2][0] ),
    .weight_in__en( pe_elements__weight_in__en[2][0] ),
    .weight_in__msg( pe_elements__weight_in__msg[2][0] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[2][0] ),
    .weight_out__en( pe_elements__weight_out__en[2][0] ),
    .weight_out__msg( pe_elements__weight_out__msg[2][0] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[2][0] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__2__1
  (
    .clk( pe_elements__clk[2][1] ),
    .perf_counter( pe_elements__perf_counter[2][1] ),
    .reset( pe_elements__reset[2][1] ),
    .weight_avail( pe_elements__weight_avail[2][1] ),
    .matrix_in__en( pe_elements__matrix_in__en[2][1] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[2][1] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[2][1] ),
    .matrix_out__en( pe_elements__matrix_out__en[2][1] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[2][1] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[2][1] ),
    .result_in__en( pe_elements__result_in__en[2][1] ),
    .result_in__msg( pe_elements__result_in__msg[2][1] ),
    .result_in__rdy( pe_elements__result_in__rdy[2][1] ),
    .result_out__en( pe_elements__result_out__en[2][1] ),
    .result_out__msg( pe_elements__result_out__msg[2][1] ),
    .result_out__rdy( pe_elements__result_out__rdy[2][1] ),
    .weight_in__en( pe_elements__weight_in__en[2][1] ),
    .weight_in__msg( pe_elements__weight_in__msg[2][1] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[2][1] ),
    .weight_out__en( pe_elements__weight_out__en[2][1] ),
    .weight_out__msg( pe_elements__weight_out__msg[2][1] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[2][1] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__2__2
  (
    .clk( pe_elements__clk[2][2] ),
    .perf_counter( pe_elements__perf_counter[2][2] ),
    .reset( pe_elements__reset[2][2] ),
    .weight_avail( pe_elements__weight_avail[2][2] ),
    .matrix_in__en( pe_elements__matrix_in__en[2][2] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[2][2] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[2][2] ),
    .matrix_out__en( pe_elements__matrix_out__en[2][2] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[2][2] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[2][2] ),
    .result_in__en( pe_elements__result_in__en[2][2] ),
    .result_in__msg( pe_elements__result_in__msg[2][2] ),
    .result_in__rdy( pe_elements__result_in__rdy[2][2] ),
    .result_out__en( pe_elements__result_out__en[2][2] ),
    .result_out__msg( pe_elements__result_out__msg[2][2] ),
    .result_out__rdy( pe_elements__result_out__rdy[2][2] ),
    .weight_in__en( pe_elements__weight_in__en[2][2] ),
    .weight_in__msg( pe_elements__weight_in__msg[2][2] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[2][2] ),
    .weight_out__en( pe_elements__weight_out__en[2][2] ),
    .weight_out__msg( pe_elements__weight_out__msg[2][2] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[2][2] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__2__3
  (
    .clk( pe_elements__clk[2][3] ),
    .perf_counter( pe_elements__perf_counter[2][3] ),
    .reset( pe_elements__reset[2][3] ),
    .weight_avail( pe_elements__weight_avail[2][3] ),
    .matrix_in__en( pe_elements__matrix_in__en[2][3] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[2][3] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[2][3] ),
    .matrix_out__en( pe_elements__matrix_out__en[2][3] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[2][3] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[2][3] ),
    .result_in__en( pe_elements__result_in__en[2][3] ),
    .result_in__msg( pe_elements__result_in__msg[2][3] ),
    .result_in__rdy( pe_elements__result_in__rdy[2][3] ),
    .result_out__en( pe_elements__result_out__en[2][3] ),
    .result_out__msg( pe_elements__result_out__msg[2][3] ),
    .result_out__rdy( pe_elements__result_out__rdy[2][3] ),
    .weight_in__en( pe_elements__weight_in__en[2][3] ),
    .weight_in__msg( pe_elements__weight_in__msg[2][3] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[2][3] ),
    .weight_out__en( pe_elements__weight_out__en[2][3] ),
    .weight_out__msg( pe_elements__weight_out__msg[2][3] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[2][3] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__3__0
  (
    .clk( pe_elements__clk[3][0] ),
    .perf_counter( pe_elements__perf_counter[3][0] ),
    .reset( pe_elements__reset[3][0] ),
    .weight_avail( pe_elements__weight_avail[3][0] ),
    .matrix_in__en( pe_elements__matrix_in__en[3][0] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[3][0] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[3][0] ),
    .matrix_out__en( pe_elements__matrix_out__en[3][0] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[3][0] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[3][0] ),
    .result_in__en( pe_elements__result_in__en[3][0] ),
    .result_in__msg( pe_elements__result_in__msg[3][0] ),
    .result_in__rdy( pe_elements__result_in__rdy[3][0] ),
    .result_out__en( pe_elements__result_out__en[3][0] ),
    .result_out__msg( pe_elements__result_out__msg[3][0] ),
    .result_out__rdy( pe_elements__result_out__rdy[3][0] ),
    .weight_in__en( pe_elements__weight_in__en[3][0] ),
    .weight_in__msg( pe_elements__weight_in__msg[3][0] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[3][0] ),
    .weight_out__en( pe_elements__weight_out__en[3][0] ),
    .weight_out__msg( pe_elements__weight_out__msg[3][0] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[3][0] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__3__1
  (
    .clk( pe_elements__clk[3][1] ),
    .perf_counter( pe_elements__perf_counter[3][1] ),
    .reset( pe_elements__reset[3][1] ),
    .weight_avail( pe_elements__weight_avail[3][1] ),
    .matrix_in__en( pe_elements__matrix_in__en[3][1] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[3][1] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[3][1] ),
    .matrix_out__en( pe_elements__matrix_out__en[3][1] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[3][1] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[3][1] ),
    .result_in__en( pe_elements__result_in__en[3][1] ),
    .result_in__msg( pe_elements__result_in__msg[3][1] ),
    .result_in__rdy( pe_elements__result_in__rdy[3][1] ),
    .result_out__en( pe_elements__result_out__en[3][1] ),
    .result_out__msg( pe_elements__result_out__msg[3][1] ),
    .result_out__rdy( pe_elements__result_out__rdy[3][1] ),
    .weight_in__en( pe_elements__weight_in__en[3][1] ),
    .weight_in__msg( pe_elements__weight_in__msg[3][1] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[3][1] ),
    .weight_out__en( pe_elements__weight_out__en[3][1] ),
    .weight_out__msg( pe_elements__weight_out__msg[3][1] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[3][1] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__3__2
  (
    .clk( pe_elements__clk[3][2] ),
    .perf_counter( pe_elements__perf_counter[3][2] ),
    .reset( pe_elements__reset[3][2] ),
    .weight_avail( pe_elements__weight_avail[3][2] ),
    .matrix_in__en( pe_elements__matrix_in__en[3][2] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[3][2] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[3][2] ),
    .matrix_out__en( pe_elements__matrix_out__en[3][2] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[3][2] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[3][2] ),
    .result_in__en( pe_elements__result_in__en[3][2] ),
    .result_in__msg( pe_elements__result_in__msg[3][2] ),
    .result_in__rdy( pe_elements__result_in__rdy[3][2] ),
    .result_out__en( pe_elements__result_out__en[3][2] ),
    .result_out__msg( pe_elements__result_out__msg[3][2] ),
    .result_out__rdy( pe_elements__result_out__rdy[3][2] ),
    .weight_in__en( pe_elements__weight_in__en[3][2] ),
    .weight_in__msg( pe_elements__weight_in__msg[3][2] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[3][2] ),
    .weight_out__en( pe_elements__weight_out__en[3][2] ),
    .weight_out__msg( pe_elements__weight_out__msg[3][2] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[3][2] )
  );

  SysArrayProcElRTL__b71fb16ff5ab1620 pe_elements__3__3
  (
    .clk( pe_elements__clk[3][3] ),
    .perf_counter( pe_elements__perf_counter[3][3] ),
    .reset( pe_elements__reset[3][3] ),
    .weight_avail( pe_elements__weight_avail[3][3] ),
    .matrix_in__en( pe_elements__matrix_in__en[3][3] ),
    .matrix_in__msg( pe_elements__matrix_in__msg[3][3] ),
    .matrix_in__rdy( pe_elements__matrix_in__rdy[3][3] ),
    .matrix_out__en( pe_elements__matrix_out__en[3][3] ),
    .matrix_out__msg( pe_elements__matrix_out__msg[3][3] ),
    .matrix_out__rdy( pe_elements__matrix_out__rdy[3][3] ),
    .result_in__en( pe_elements__result_in__en[3][3] ),
    .result_in__msg( pe_elements__result_in__msg[3][3] ),
    .result_in__rdy( pe_elements__result_in__rdy[3][3] ),
    .result_out__en( pe_elements__result_out__en[3][3] ),
    .result_out__msg( pe_elements__result_out__msg[3][3] ),
    .result_out__rdy( pe_elements__result_out__rdy[3][3] ),
    .weight_in__en( pe_elements__weight_in__en[3][3] ),
    .weight_in__msg( pe_elements__weight_in__msg[3][3] ),
    .weight_in__rdy( pe_elements__weight_in__rdy[3][3] ),
    .weight_out__en( pe_elements__weight_out__en[3][3] ),
    .weight_out__msg( pe_elements__weight_out__msg[3][3] ),
    .weight_out__rdy( pe_elements__weight_out__rdy[3][3] )
  );

  //-------------------------------------------------------------
  // End of component pe_elements[0:3][0:3]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3-systolic/SysArray/SysArrayRTL.py:61
  // @s.update
  // def last_weight_avail():
  //   for col in range( cols ):
  //     s.last_row_weight_avail[col] = s.pe_elements[rows-1][col].weight_avail
  //   
  //   s.all_weights_avail = reduce_and( s.last_row_weight_avail )
  
  always_comb begin : last_weight_avail
    for ( int col = 0; col < __const__cols_at_last_weight_avail; col += 1 )
      last_row_weight_avail[col] = pe_elements__weight_avail[__const__rows_at_last_weight_avail - 1][col];
    all_weights_avail = ( & last_row_weight_avail );
  end

  // PyMTL Update Block Source
  // At /home/ld443/pymtl3-systolic/SysArray/SysArrayRTL.py:70
  // @s.update
  // def matrix_en_rdy_signals():
  //   for row in range( rows ):
  //     s.matrix_in_rdys[row] = s.pe_elements[row][0].matrix_in.rdy & \
  //                             s.all_weights_avail
  
  always_comb begin : matrix_en_rdy_signals
    for ( int row = 0; row < __const__rows_at_matrix_en_rdy_signals; row += 1 )
      matrix_in_rdys[row] = pe_elements__matrix_in__rdy[row][0] & all_weights_avail;
  end

  assign pe_elements__clk[0][0] = clk;
  assign pe_elements__reset[0][0] = reset;
  assign pe_elements__clk[0][1] = clk;
  assign pe_elements__reset[0][1] = reset;
  assign pe_elements__clk[0][2] = clk;
  assign pe_elements__reset[0][2] = reset;
  assign pe_elements__clk[0][3] = clk;
  assign pe_elements__reset[0][3] = reset;
  assign pe_elements__clk[1][0] = clk;
  assign pe_elements__reset[1][0] = reset;
  assign pe_elements__clk[1][1] = clk;
  assign pe_elements__reset[1][1] = reset;
  assign pe_elements__clk[1][2] = clk;
  assign pe_elements__reset[1][2] = reset;
  assign pe_elements__clk[1][3] = clk;
  assign pe_elements__reset[1][3] = reset;
  assign pe_elements__clk[2][0] = clk;
  assign pe_elements__reset[2][0] = reset;
  assign pe_elements__clk[2][1] = clk;
  assign pe_elements__reset[2][1] = reset;
  assign pe_elements__clk[2][2] = clk;
  assign pe_elements__reset[2][2] = reset;
  assign pe_elements__clk[2][3] = clk;
  assign pe_elements__reset[2][3] = reset;
  assign pe_elements__clk[3][0] = clk;
  assign pe_elements__reset[3][0] = reset;
  assign pe_elements__clk[3][1] = clk;
  assign pe_elements__reset[3][1] = reset;
  assign pe_elements__clk[3][2] = clk;
  assign pe_elements__reset[3][2] = reset;
  assign pe_elements__clk[3][3] = clk;
  assign pe_elements__reset[3][3] = reset;
  assign pe_elements__matrix_in__en[0][0] = matrix_row__en[0];
  assign pe_elements__matrix_in__msg[0][0] = matrix_row__msg[0];
  assign matrix_row__rdy[0] = matrix_in_rdys[0:0];
  assign pe_elements__matrix_out__rdy[0][3] = 1'd1;
  assign pe_elements__result_in__msg[0][0] = 32'd0;
  assign pe_elements__result_in__en[0][0] = 1'd1;
  assign pe_elements__weight_in__en[0][0] = weight_in_col__en[0];
  assign pe_elements__weight_in__msg[0][0] = weight_in_col__msg[0];
  assign weight_in_col__rdy[0] = pe_elements__weight_in__rdy[0][0];
  assign pe_elements__result_in__en[1][0] = pe_elements__result_out__en[0][0];
  assign pe_elements__result_in__msg[1][0] = pe_elements__result_out__msg[0][0];
  assign pe_elements__result_out__rdy[0][0] = pe_elements__result_in__rdy[1][0];
  assign pe_elements__weight_in__en[1][0] = pe_elements__weight_out__en[0][0];
  assign pe_elements__weight_in__msg[1][0] = pe_elements__weight_out__msg[0][0];
  assign pe_elements__weight_out__rdy[0][0] = pe_elements__weight_in__rdy[1][0];
  assign pe_elements__matrix_in__en[0][1] = pe_elements__matrix_out__en[0][0];
  assign pe_elements__matrix_in__msg[0][1] = pe_elements__matrix_out__msg[0][0];
  assign pe_elements__matrix_out__rdy[0][0] = pe_elements__matrix_in__rdy[0][1];
  assign pe_elements__result_in__msg[0][1] = 32'd0;
  assign pe_elements__result_in__en[0][1] = 1'd1;
  assign pe_elements__weight_in__en[0][1] = weight_in_col__en[1];
  assign pe_elements__weight_in__msg[0][1] = weight_in_col__msg[1];
  assign weight_in_col__rdy[1] = pe_elements__weight_in__rdy[0][1];
  assign pe_elements__result_in__en[1][1] = pe_elements__result_out__en[0][1];
  assign pe_elements__result_in__msg[1][1] = pe_elements__result_out__msg[0][1];
  assign pe_elements__result_out__rdy[0][1] = pe_elements__result_in__rdy[1][1];
  assign pe_elements__weight_in__en[1][1] = pe_elements__weight_out__en[0][1];
  assign pe_elements__weight_in__msg[1][1] = pe_elements__weight_out__msg[0][1];
  assign pe_elements__weight_out__rdy[0][1] = pe_elements__weight_in__rdy[1][1];
  assign pe_elements__matrix_in__en[0][2] = pe_elements__matrix_out__en[0][1];
  assign pe_elements__matrix_in__msg[0][2] = pe_elements__matrix_out__msg[0][1];
  assign pe_elements__matrix_out__rdy[0][1] = pe_elements__matrix_in__rdy[0][2];
  assign pe_elements__result_in__msg[0][2] = 32'd0;
  assign pe_elements__result_in__en[0][2] = 1'd1;
  assign pe_elements__weight_in__en[0][2] = weight_in_col__en[2];
  assign pe_elements__weight_in__msg[0][2] = weight_in_col__msg[2];
  assign weight_in_col__rdy[2] = pe_elements__weight_in__rdy[0][2];
  assign pe_elements__result_in__en[1][2] = pe_elements__result_out__en[0][2];
  assign pe_elements__result_in__msg[1][2] = pe_elements__result_out__msg[0][2];
  assign pe_elements__result_out__rdy[0][2] = pe_elements__result_in__rdy[1][2];
  assign pe_elements__weight_in__en[1][2] = pe_elements__weight_out__en[0][2];
  assign pe_elements__weight_in__msg[1][2] = pe_elements__weight_out__msg[0][2];
  assign pe_elements__weight_out__rdy[0][2] = pe_elements__weight_in__rdy[1][2];
  assign pe_elements__matrix_in__en[0][3] = pe_elements__matrix_out__en[0][2];
  assign pe_elements__matrix_in__msg[0][3] = pe_elements__matrix_out__msg[0][2];
  assign pe_elements__matrix_out__rdy[0][2] = pe_elements__matrix_in__rdy[0][3];
  assign pe_elements__result_in__msg[0][3] = 32'd0;
  assign pe_elements__result_in__en[0][3] = 1'd1;
  assign pe_elements__weight_in__en[0][3] = weight_in_col__en[3];
  assign pe_elements__weight_in__msg[0][3] = weight_in_col__msg[3];
  assign weight_in_col__rdy[3] = pe_elements__weight_in__rdy[0][3];
  assign pe_elements__result_in__en[1][3] = pe_elements__result_out__en[0][3];
  assign pe_elements__result_in__msg[1][3] = pe_elements__result_out__msg[0][3];
  assign pe_elements__result_out__rdy[0][3] = pe_elements__result_in__rdy[1][3];
  assign pe_elements__weight_in__en[1][3] = pe_elements__weight_out__en[0][3];
  assign pe_elements__weight_in__msg[1][3] = pe_elements__weight_out__msg[0][3];
  assign pe_elements__weight_out__rdy[0][3] = pe_elements__weight_in__rdy[1][3];
  assign pe_elements__matrix_in__en[1][0] = matrix_row__en[1];
  assign pe_elements__matrix_in__msg[1][0] = matrix_row__msg[1];
  assign matrix_row__rdy[1] = matrix_in_rdys[1:1];
  assign pe_elements__matrix_out__rdy[1][3] = 1'd1;
  assign pe_elements__result_in__en[2][0] = pe_elements__result_out__en[1][0];
  assign pe_elements__result_in__msg[2][0] = pe_elements__result_out__msg[1][0];
  assign pe_elements__result_out__rdy[1][0] = pe_elements__result_in__rdy[2][0];
  assign pe_elements__weight_in__en[2][0] = pe_elements__weight_out__en[1][0];
  assign pe_elements__weight_in__msg[2][0] = pe_elements__weight_out__msg[1][0];
  assign pe_elements__weight_out__rdy[1][0] = pe_elements__weight_in__rdy[2][0];
  assign pe_elements__matrix_in__en[1][1] = pe_elements__matrix_out__en[1][0];
  assign pe_elements__matrix_in__msg[1][1] = pe_elements__matrix_out__msg[1][0];
  assign pe_elements__matrix_out__rdy[1][0] = pe_elements__matrix_in__rdy[1][1];
  assign pe_elements__result_in__en[2][1] = pe_elements__result_out__en[1][1];
  assign pe_elements__result_in__msg[2][1] = pe_elements__result_out__msg[1][1];
  assign pe_elements__result_out__rdy[1][1] = pe_elements__result_in__rdy[2][1];
  assign pe_elements__weight_in__en[2][1] = pe_elements__weight_out__en[1][1];
  assign pe_elements__weight_in__msg[2][1] = pe_elements__weight_out__msg[1][1];
  assign pe_elements__weight_out__rdy[1][1] = pe_elements__weight_in__rdy[2][1];
  assign pe_elements__matrix_in__en[1][2] = pe_elements__matrix_out__en[1][1];
  assign pe_elements__matrix_in__msg[1][2] = pe_elements__matrix_out__msg[1][1];
  assign pe_elements__matrix_out__rdy[1][1] = pe_elements__matrix_in__rdy[1][2];
  assign pe_elements__result_in__en[2][2] = pe_elements__result_out__en[1][2];
  assign pe_elements__result_in__msg[2][2] = pe_elements__result_out__msg[1][2];
  assign pe_elements__result_out__rdy[1][2] = pe_elements__result_in__rdy[2][2];
  assign pe_elements__weight_in__en[2][2] = pe_elements__weight_out__en[1][2];
  assign pe_elements__weight_in__msg[2][2] = pe_elements__weight_out__msg[1][2];
  assign pe_elements__weight_out__rdy[1][2] = pe_elements__weight_in__rdy[2][2];
  assign pe_elements__matrix_in__en[1][3] = pe_elements__matrix_out__en[1][2];
  assign pe_elements__matrix_in__msg[1][3] = pe_elements__matrix_out__msg[1][2];
  assign pe_elements__matrix_out__rdy[1][2] = pe_elements__matrix_in__rdy[1][3];
  assign pe_elements__result_in__en[2][3] = pe_elements__result_out__en[1][3];
  assign pe_elements__result_in__msg[2][3] = pe_elements__result_out__msg[1][3];
  assign pe_elements__result_out__rdy[1][3] = pe_elements__result_in__rdy[2][3];
  assign pe_elements__weight_in__en[2][3] = pe_elements__weight_out__en[1][3];
  assign pe_elements__weight_in__msg[2][3] = pe_elements__weight_out__msg[1][3];
  assign pe_elements__weight_out__rdy[1][3] = pe_elements__weight_in__rdy[2][3];
  assign pe_elements__matrix_in__en[2][0] = matrix_row__en[2];
  assign pe_elements__matrix_in__msg[2][0] = matrix_row__msg[2];
  assign matrix_row__rdy[2] = matrix_in_rdys[2:2];
  assign pe_elements__matrix_out__rdy[2][3] = 1'd1;
  assign pe_elements__result_in__en[3][0] = pe_elements__result_out__en[2][0];
  assign pe_elements__result_in__msg[3][0] = pe_elements__result_out__msg[2][0];
  assign pe_elements__result_out__rdy[2][0] = pe_elements__result_in__rdy[3][0];
  assign pe_elements__weight_in__en[3][0] = pe_elements__weight_out__en[2][0];
  assign pe_elements__weight_in__msg[3][0] = pe_elements__weight_out__msg[2][0];
  assign pe_elements__weight_out__rdy[2][0] = pe_elements__weight_in__rdy[3][0];
  assign pe_elements__matrix_in__en[2][1] = pe_elements__matrix_out__en[2][0];
  assign pe_elements__matrix_in__msg[2][1] = pe_elements__matrix_out__msg[2][0];
  assign pe_elements__matrix_out__rdy[2][0] = pe_elements__matrix_in__rdy[2][1];
  assign pe_elements__result_in__en[3][1] = pe_elements__result_out__en[2][1];
  assign pe_elements__result_in__msg[3][1] = pe_elements__result_out__msg[2][1];
  assign pe_elements__result_out__rdy[2][1] = pe_elements__result_in__rdy[3][1];
  assign pe_elements__weight_in__en[3][1] = pe_elements__weight_out__en[2][1];
  assign pe_elements__weight_in__msg[3][1] = pe_elements__weight_out__msg[2][1];
  assign pe_elements__weight_out__rdy[2][1] = pe_elements__weight_in__rdy[3][1];
  assign pe_elements__matrix_in__en[2][2] = pe_elements__matrix_out__en[2][1];
  assign pe_elements__matrix_in__msg[2][2] = pe_elements__matrix_out__msg[2][1];
  assign pe_elements__matrix_out__rdy[2][1] = pe_elements__matrix_in__rdy[2][2];
  assign pe_elements__result_in__en[3][2] = pe_elements__result_out__en[2][2];
  assign pe_elements__result_in__msg[3][2] = pe_elements__result_out__msg[2][2];
  assign pe_elements__result_out__rdy[2][2] = pe_elements__result_in__rdy[3][2];
  assign pe_elements__weight_in__en[3][2] = pe_elements__weight_out__en[2][2];
  assign pe_elements__weight_in__msg[3][2] = pe_elements__weight_out__msg[2][2];
  assign pe_elements__weight_out__rdy[2][2] = pe_elements__weight_in__rdy[3][2];
  assign pe_elements__matrix_in__en[2][3] = pe_elements__matrix_out__en[2][2];
  assign pe_elements__matrix_in__msg[2][3] = pe_elements__matrix_out__msg[2][2];
  assign pe_elements__matrix_out__rdy[2][2] = pe_elements__matrix_in__rdy[2][3];
  assign pe_elements__result_in__en[3][3] = pe_elements__result_out__en[2][3];
  assign pe_elements__result_in__msg[3][3] = pe_elements__result_out__msg[2][3];
  assign pe_elements__result_out__rdy[2][3] = pe_elements__result_in__rdy[3][3];
  assign pe_elements__weight_in__en[3][3] = pe_elements__weight_out__en[2][3];
  assign pe_elements__weight_in__msg[3][3] = pe_elements__weight_out__msg[2][3];
  assign pe_elements__weight_out__rdy[2][3] = pe_elements__weight_in__rdy[3][3];
  assign pe_elements__matrix_in__en[3][0] = matrix_row__en[3];
  assign pe_elements__matrix_in__msg[3][0] = matrix_row__msg[3];
  assign matrix_row__rdy[3] = matrix_in_rdys[3:3];
  assign pe_elements__matrix_out__rdy[3][3] = 1'd1;
  assign matrix_col__en[0] = pe_elements__result_out__en[3][0];
  assign matrix_col__msg[0] = pe_elements__result_out__msg[3][0];
  assign pe_elements__result_out__rdy[3][0] = matrix_col__rdy[0];
  assign weight_out_col__en[0] = pe_elements__weight_out__en[3][0];
  assign weight_out_col__msg[0] = pe_elements__weight_out__msg[3][0];
  assign pe_elements__weight_out__rdy[3][0] = weight_out_col__rdy[0];
  assign pe_elements__matrix_in__en[3][1] = pe_elements__matrix_out__en[3][0];
  assign pe_elements__matrix_in__msg[3][1] = pe_elements__matrix_out__msg[3][0];
  assign pe_elements__matrix_out__rdy[3][0] = pe_elements__matrix_in__rdy[3][1];
  assign matrix_col__en[1] = pe_elements__result_out__en[3][1];
  assign matrix_col__msg[1] = pe_elements__result_out__msg[3][1];
  assign pe_elements__result_out__rdy[3][1] = matrix_col__rdy[1];
  assign weight_out_col__en[1] = pe_elements__weight_out__en[3][1];
  assign weight_out_col__msg[1] = pe_elements__weight_out__msg[3][1];
  assign pe_elements__weight_out__rdy[3][1] = weight_out_col__rdy[1];
  assign pe_elements__matrix_in__en[3][2] = pe_elements__matrix_out__en[3][1];
  assign pe_elements__matrix_in__msg[3][2] = pe_elements__matrix_out__msg[3][1];
  assign pe_elements__matrix_out__rdy[3][1] = pe_elements__matrix_in__rdy[3][2];
  assign matrix_col__en[2] = pe_elements__result_out__en[3][2];
  assign matrix_col__msg[2] = pe_elements__result_out__msg[3][2];
  assign pe_elements__result_out__rdy[3][2] = matrix_col__rdy[2];
  assign weight_out_col__en[2] = pe_elements__weight_out__en[3][2];
  assign weight_out_col__msg[2] = pe_elements__weight_out__msg[3][2];
  assign pe_elements__weight_out__rdy[3][2] = weight_out_col__rdy[2];
  assign pe_elements__matrix_in__en[3][3] = pe_elements__matrix_out__en[3][2];
  assign pe_elements__matrix_in__msg[3][3] = pe_elements__matrix_out__msg[3][2];
  assign pe_elements__matrix_out__rdy[3][2] = pe_elements__matrix_in__rdy[3][3];
  assign matrix_col__en[3] = pe_elements__result_out__en[3][3];
  assign matrix_col__msg[3] = pe_elements__result_out__msg[3][3];
  assign pe_elements__result_out__rdy[3][3] = matrix_col__rdy[3];
  assign weight_out_col__en[3] = pe_elements__weight_out__en[3][3];
  assign weight_out_col__msg[3] = pe_elements__weight_out__msg[3][3];
  assign pe_elements__weight_out__rdy[3][3] = weight_out_col__rdy[3];

endmodule
